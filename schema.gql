# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  descriptionShort: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Address {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  country: String!
  city: String!
  subCity: String!
  streetAddress: String!
  woreda: String!
  kebele: String!
  houseNumber: String!
  telephone: String!
  alternateTelephone: String!
  mobile: String!
  alternateMobile: String!
  email: String!
  alternateEmail: String!
  webAddress: String!
  fax: String!
  poBox: String!
  notes: String!
  client: Client!
  warehouse: Warehouse!
}

type Client {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: ClientType!
  addressId: Int!
  organizations: [Organization!]!
  address: Address!
}

enum ClientType {
  SingleOrgSingleStore
  SingleOrgMultiStore
  MultiOrgSingleStore
  MultiOrgMultiStore
}

type Organization {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  clientId: Int!
  addressId: Int!
  client: Client!
  warehouses: [Warehouse!]!
  address: Address!
}

type Contact {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  fullName: String!
  address: Address!
}

type SalesPerson {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  code: String!
  salesLimit: Float!
  contact: Contact!
  businessPartners: BusinessPartner!
}

type BusinessPartner {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  tinNumber: String!
  vatNumber: String!
  code: String!
  paymentTerm: Int!
  creditLimit: Float!
  creditTransactionsLimit: Int!
  creditsWithoutCheck: Boolean
  totalOutstandingCredit: Float!
  initialOutstandingCredit: Float!
  noOfOutstandingTransactions: Int!
  type: BusinessPartnerType!
  category: BusinessPartnerCategory!
  address: Address!
  contact: Contact!
  salesPerson: SalesPerson!
  transactions: [TransactionHeader!]!
}

enum BusinessPartnerType {
  Customer
  Vendor
}

enum BusinessPartnerCategory {
  Organization
  Individual
}

type Category {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: CategoryType!
  parentCategory: Category
  childCategories: [Category!]!
}

enum CategoryType {
  ItemCategory
  UnitOfMeasure
  Bank
}

type FinancialAccount {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  bankId: Int
  bank: Category!
  branch: String!
  accountNumber: String!
  accountFormat: String!
  iban: String!
  swiftCode: String!
  country: String!
  organizationId: Int
  organization: Organization
  businessPartnerId: Int
  businessPartner: BusinessPartner
}

type Check {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  checkDate: DateTime
  number: String!
  customerAccountId: Int!
  customerAccount: FinancialAccount!
  organizationAccountId: Int
  organizationAccount: FinancialAccount
}

type Clearance {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  statementNumber: String!
  statementDate: DateTime
  depositedDate: DateTime
  depositedById: Int
  depositedBy: User
  clearedDate: DateTime
  clearedById: Int
  clearedBy: User
  organizationAccountId: Int!
  organizationAccount: FinancialAccount!
}

type Payment {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  method: PaymentMethods!
  type: PaymentTypes!
  status: PaymentStatus!
  paymentDate: DateTime!
  dueDate: DateTime
  amount: Float!
  reason: String!
  paymentRemark: String!
  personName: String!
  checkId: Int
  clearanceId: Int
  headerId: Int
  warehouseId: Int
  warehouse: Warehouse
  check: Check!
  clearance: Clearance!
  header: TransactionHeader!
}

enum PaymentMethods {
  Cash
  Credit
  Check
}

enum PaymentTypes {
  Sale
  Purchase
  CashIn
  CashOut
  SaleCredit
  PurchaseCredit
}

enum PaymentStatus {
  Deposited
  Checked
  Verified
  Cleared
  NotDeposited
  NotCleared
  NoPayment
  Refunded
}

type Item {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: ItemType!
  pictureUrl: String!
  itemCategoryId: Int
  itemCategory: Category!
  unitOfMeasureId: Int
  unitOfMeasure: Category!
  purchasePrice: Float
  sellingPrice: Float
  safeQty: Float
}

enum ItemType {
  Purchased
  Manufactured
  Service
}

type TransactionLine {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  headerId: Int
  itemId: Int
  qty: Float!
  eachPrice: Float!
  diff: Float!
  linePrice: Float
  header: TransactionHeader!
  item: Item!
}

type TransactionHeader {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  type: TransactionType!
  status: TransactionStatus!
  number: String
  numberOfItems: Int!
  totalAmount: Float!
  totalQty: Float!
  transactionDate: DateTime!
  warehouseId: Int!
  warehouse: Warehouse!
  toWarehouseId: Int
  toWarehouse: Warehouse
  businessPartnerId: Int
  businessPartner: BusinessPartner
  lines: [TransactionLine!]!
  payments: [Payment!]!
  comment: String!
}

enum TransactionType {
  All
  Sale
  Purchase
  PI
  Transfer
  Profit
  GoodsIn
  GoodsOut
}

enum TransactionStatus {
  New
  Draft
  Order
  Posted
  PostedWithLessStock
  Completed
  Closed
  Approved
  Archived
  Canceled
  OnProcess
  Shipped
  DeliveryConfirmed
  Received
  Refunded
}

type Setting {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  checkCreditLimit: Boolean!
  handleBankTransaction: Boolean!
  enableReservations: Boolean!
  enableCheckEntry: Boolean!
  postWithLessStock: Boolean!
  taxType: TaxTypes!
  byDefaultItemsHaveThisTaxRate: Boolean!
  itemPricesAreTaxInclusive: Boolean!
  taxPercent: Float!
  warehouseId: Int!
  lastInventoryUpdated: DateTime!
  lastPIUpdated: DateTime!
  lastPurchaseUpdated: DateTime!
  lastSalesUpdated: DateTime!
  lastItemsUpdated: DateTime!
  lastBusinessPartnersUpdated: DateTime!
  warehouse: Warehouse!
}

enum TaxTypes {
  Vat
  Tot
  NoTax
}

type Warehouse {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  organizationId: Int!
  addressId: Int!
  organization: Organization!
  address: Address!
  transactions: [TransactionHeader!]!
  payments: [Payment!]!
  setting: Setting!
}

type User {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  name: String!
  email: String!
  password: String!
  salt: String
  avatar: String
  bio: String
  isAdmin: Boolean!
  status: UserStatus!
  verifiedAt: DateTime
  token: String!
  expiredAt: DateTime!
  roles: [Role!]!
  warehouses: [Warehouse!]!
  clientId: Int
  client: Client!
}

enum UserStatus {
  Waiting
  Active
  Disabled
  Blocked
}

type DelResult {
  affectedRows: String!
}

type BusinessPartnersWithCount {
  totalCount: Float!
  businessPartners: [BusinessPartner!]!
}

type ItemsWithCount {
  totalCount: Float!
  items: [Item!]!
}

type FinancialAccountsWithCount {
  totalCount: Float!
  financialAccounts: [FinancialAccount!]!
}

type Inventory {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  warehouseId: Int!
  itemId: Int!
  qtyOnHand: Float!
  totalPurchaseValue: Float
  totalSaleValue: Float
  totalProfitValue: Float
  warehouse: Warehouse!
  item: Item!
}

type SummaryInput {
  type: TransactionType
  summaryValue: Float
}

type InventorySummary {
  warehouseId: Float
  totalItems: Float
  totalPurchases: Float
  totalSales: Float
}

type LineSummary {
  warehouseId: Float
  itemId: Float
  itemName: String
  totalTransactions: Float
  totalAmount: Float
}

type DailyTransactionsSummary {
  warehouseId: Float
  totalTransactions: Float
  transactionDate: String
  totalAmount: Float
}

type HeadersWithCount {
  totalCount: Float!
  headers: [TransactionHeader!]!
}

type LinesWithCount {
  totalCount: Float!
  lines: [TransactionLine!]!
}

type InventoriesWithCount {
  totalCount: Float!
  inventories: [Inventory!]!
}

type PaymentsWithCount {
  totalCount: Float!
  payments: [Payment!]!
}

type Query {
  Users(skip: Int = 0, take: Int = 25, searchText: String): [User!]!
  GetUser(input: ListUserInput!): User!
  GetRoles: [Role!]!
  clients(skip: Int = 0, take: Int = 25, clientId: Int, searchText: String): [Client!]!
  getClient(id: Int!): Client!
  organizations(skip: Int = 0, take: Int = 25, clientId: Int, organizationId: Int, searchText: String): [Organization!]!
  getOrganization(id: Int!): Organization!
  warehouses(skip: Int = 0, take: Int = 25, organizationId: Int, warehouseId: Int, parent: String, parentId: Int, searchText: String): [Warehouse!]!
  getWarehouse(id: Int!): Warehouse!
  businessPartners(skip: Int = 0, take: Int = 25, minimumOutstandingCredits: Float, type: BusinessPartnerType!, searchText: String): BusinessPartnersWithCount!
  getBusinessPartner(id: Int!): BusinessPartner!
  items(skip: Int = 0, take: Int = 25, itemId: Int, categoryId: Int, subCategoryId: Int, uomId: Int, searchText: String): ItemsWithCount!
  getItems(skip: Int = 0, take: Int = 25, itemId: Int, categoryId: Int, subCategoryId: Int, uomId: Int, searchText: String): [Item!]!
  getItem(id: Int!): Item!
  financialAccounts(skip: Int = 0, take: Int = 25, bankId: Int, organizationId: Int, businessPartnerId: Int, searchText: String): FinancialAccountsWithCount!
  getFinancialAccount(id: Int!): FinancialAccount!
  getCategories(skip: Int = 0, take: Int = 25, searchText: String): [Category!]!
  transactions(skip: Int = 0, take: Int = 25, warehouseId: Int, businessPartnerId: Int, includeLines: Boolean = false, groupByDate: Boolean = false, type: TransactionType!, searchText: String, durationBegin: DateTime, durationEnd: DateTime, lastUpdated: DateTime): HeadersWithCount!
  inventories(skip: Int = 0, take: Int = 25, warehouseId: Int, itemId: Int, categoryId: Int, uomId: Int, searchText: String, lastUpdated: DateTime): InventoriesWithCount!
  lines(skip: Int = 0, take: Int = 25, headerId: Int, warehouseId: Int, itemId: Int, status: TransactionStatus = Draft, searchText: String, includeSales: Boolean, includePurchases: Boolean, includePIs: Boolean, includeTransfers: Boolean, durationBegin: DateTime, durationEnd: DateTime, lastUpdated: DateTime): LinesWithCount!
  payments(skip: Int = 0, take: Int = 25, headerId: Int, warehouseId: Int, type: PaymentTypes, method: PaymentMethods, status: PaymentStatus, searchText: String, durationBegin: DateTime, durationEnd: DateTime): PaymentsWithCount!
  getHeaderById(id: Int!): TransactionHeader!
  getItemInventory(id: Int!): Inventory!
  inventorySummary(skip: Int = 0, take: Int = 25, warehouseId: Int, itemId: Int, categoryId: Int, uomId: Int, searchText: String, lastUpdated: DateTime): [SummaryInput!]!
  getInventorySummary(skip: Int = 0, take: Int = 25, warehouseId: Int, itemId: Int, categoryId: Int, uomId: Int, searchText: String, lastUpdated: DateTime): InventorySummary!
  topItems(skip: Int = 0, take: Int = 25, headerId: Int, warehouseId: Int, itemId: Int, status: TransactionStatus = Draft, searchText: String, includeSales: Boolean, includePurchases: Boolean, includePIs: Boolean, includeTransfers: Boolean, durationBegin: DateTime, durationEnd: DateTime, lastUpdated: DateTime): [LineSummary!]!
  dailyTransactions(skip: Int = 0, take: Int = 25, warehouseId: Int, businessPartnerId: Int, includeLines: Boolean = false, groupByDate: Boolean = false, type: TransactionType!, searchText: String, durationBegin: DateTime, durationEnd: DateTime, lastUpdated: DateTime): [DailyTransactionsSummary!]!
}

input ListUserInput {
  id: Int
  name: String
  email: String
  password: String
}

type Mutation {
  authUser(input: ListUserInput!): User!
  googleLogin(input: GoogleInput!): User!
  facebookLogin(input: FacebookInput!): User!
  register(input: CreateUserInput!): User!
  registerFederatedUser(input: CreateUserInput!): User!
  changePassword(input: UpdatePassword!): User!
  verifyEmail(input: VerifyAuth!): User!
  resendVerificationEmail(input: VerifyResendAuth!): User!
  forgotPassword(input: ForgotAuth!): User!
  resetUserPassword(input: ResetAuth!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: Float!): DelResult!
  addRoles: [Role!]!
  addUserRoles(input: IdList!): User!
  addUserWarehouses(input: IdList!): User!
  deleteAll: Float!
  createUpdateClient(input: ClientInput!): Client!
  removeClient(id: Int!): DelResult!
  createUpdateOrganization(input: OrganizationInput!): Organization!
  removeOrganization(id: Int!): DelResult!
  createUpdateWarehouse(input: WarehouseInput!): Warehouse!
  removeWarehouse(id: Int!): DelResult!
  createBusinessPartner(input: CreateBusinessPartnerInput!): BusinessPartner!
  removeBusinessPartner(id: Int!): DelResult!
  createItem(input: CreateItemInput!): Item!
  createFinancialAccount(input: FinancialAccountInput!): FinancialAccount!
  createItemCategory(input: CategoryInput!): Category!
  removeItem(id: Int!): DelResult!
  removeFinancialAccount(id: Int!): DelResult!
  removeCategory(id: Int!): DelResult!
  createTransaction(input: CreateTransactionInput!): TransactionHeader!
  createUpdateLine(input: TransactionLineInput!): TransactionLine!
  postHeader(id: Int!): TransactionHeader!
  postHeaderWithPayment(input: PaymentInput!): TransactionHeader!
  unPostHeader(id: Int!): TransactionHeader!
  removeHeader(id: Int!): DelResult!
  removeLine(id: Int!): TransactionHeader!
}

input GoogleInput {
  idToken: String!
}

input FacebookInput {
  userID: String!
  accessToken: String!
}

input CreateUserInput {
  clientId: Int
  accountVerified: Boolean = false
  name: String
  email: String
  password: String
  confirmPassword: String
}

input UpdatePassword {
  userId: Int!
  oldPassword: String!
  password: String!
  confirmPassword: String!
}

input VerifyAuth {
  expires: String!
  id: Int!
  token: String!
  signature: String!
}

input VerifyResendAuth {
  id: Int!
}

input ForgotAuth {
  email: String!
}

input ResetAuth {
  password: String!
  confirmPassword: String!
  id: Int!
  token: String!
}

input UpdateUserInput {
  id: Int!
  name: String
  email: String
  bio: String
  avatar: String
}

input IdList {
  ids: [Int!]!
}

input ClientInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  address: AddressInput!
}

input AddressInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  country: String
  city: String
  subCity: String
  streetAddress: String
  woreda: String
  kebele: String
  houseNumber: String
  mobile: String
  alternateMobile: String
  telephone: String
  alternateTelephone: String
  email: String
  alternateEmail: String
  webAddress: String
  fax: String
  poBox: String
  notes: String
}

input OrganizationInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  clientId: Int!
  address: AddressInput!
}

input WarehouseInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  organizationId: Int!
  address: AddressInput!
}

input CreateBusinessPartnerInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  creditTransactionsLimit: Int = 0
  type: BusinessPartnerType!
  initialOutstandingCredit: Float
  creditLimit: Float
  address: AddressInput!
  contact: ContactInput!
}

input ContactInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  fullName: String!
  address: AddressInput!
}

input CreateItemInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  code: String
  itemCategory: CategoryInput
  unitOfMeasure: CategoryInput
  purchasePrice: Float
  sellingPrice: Float
  safeQty: Float
}

input CategoryInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  type: CategoryType = ItemCategory
  parentCategory: CategoryInput
}

input FinancialAccountInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  organizationId: Int
  businessPartnerId: Int
  branch: String
  accountNumber: String!
  accountFormat: String
  iban: String
  swiftCode: String
  country: String
  bank: CategoryInput
}

input CreateTransactionInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  transactionDate: DateTime
  warehouseId: Int
  warehouse: DisplayInput
  toWarehouseId: Int
  toWarehouse: DisplayInput
  businessPartnerId: Int
  businessPartner: DisplayInput
  type: TransactionType
  number: String
  totalAmount: Float
  totalQty: Float
  numberOfItems: Float
  lines: [TransactionLineInput!]
}

input DisplayInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
}

input TransactionLineInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  itemId: Int
  header: TransactionInput
  qty: Float
  eachPrice: Float
  diff: Float
}

input TransactionInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  transactionDate: DateTime
  warehouseId: Int
  warehouse: DisplayInput
  toWarehouseId: Int
  toWarehouse: DisplayInput
  businessPartnerId: Int
  businessPartner: DisplayInput
  type: TransactionType!
  number: String
  totalAmount: Float
  totalQty: Float
  numberOfItems: Float
  lines: [TransactionLineInput!]
}

input PaymentInput {
  headerId: Int
  type: PaymentTypes
  paymentDate: DateTime
  amount: Float
  amountRequired: Float
}
