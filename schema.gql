# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  descriptionShort: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  name: String!
  email: String!
  password: String!
  salt: String
  avatar: String
  bio: String
  isAdmin: Boolean!
  status: UserStatus!
  verifiedAt: DateTime
  token: String!
  expiredAt: DateTime!
  roles: [Role!]!
}

enum UserStatus {
  Waiting
  Active
  Disabled
  Blocked
}

type DelResult {
  affectedRows: String!
}

type Address {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  country: String!
  city: String!
  subCity: String!
  streetAddress: String!
  woreda: String!
  kebele: String!
  houseNumber: String!
  telephone: String!
  alternateTelephone: String!
  email: String!
  alternateEmail: String!
  webAddress: String!
  fax: String!
  poBox: String!
  notes: String!
}

type Contact {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  fullName: String!
  address: Address!
}

type SalesPerson {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  code: String!
  salesLimit: Float!
  contact: Contact!
  businessPartners: BusinessPartner!
}

type BusinessPartner {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  tinNumber: String!
  vatNumber: String!
  code: String!
  creditLimit: Float!
  type: BusinessPartnerType!
  category: BusinessPartnerCategory!
  address: Address!
  contact: Contact!
  salesPerson: SalesPerson!
  transactions: [TransactionHeader!]!
}

enum BusinessPartnerType {
  Customer
  Vendor
}

enum BusinessPartnerCategory {
  Organization
  Individual
}

type Category {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: CategoryType!
  parentCategory: Category
  childCategories: [Category!]!
}

enum CategoryType {
  ItemCategory
  UnitOfMeasure
  Bank
}

type Item {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: ItemType!
  code: String
  pictureUrl: String
  itemCategoryId: Int
  itemCategory: Category!
  unitOfMeasureId: Int
  unitOfMeasure: Category!
  purchasePrice: Float
  sellingPrice: Float
  safeQty: Float
}

enum ItemType {
  Purchased
  Manufactured
  Service
}

type TransactionLine {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  headerId: Int
  itemId: Int
  qty: Float!
  eachPrice: Float!
  diff: Float!
  header: TransactionHeader!
  item: Item!
}

type TransactionHeader {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  type: TransactionType!
  status: TransactionStatus!
  number: String
  transactionDate: DateTime!
  warehouseId: Int
  businessPartnerId: Int
  lines: [TransactionLine!]!
  comment: String!
}

enum TransactionType {
  All
  Sale
  Purchase
  Profit
  Pi
  GoodsIn
  GoodsOut
  StockTransfer
}

enum TransactionStatus {
  New
  Draft
  Order
  Posted
  PostedWithLessStock
  Completed
  Closed
  Approved
  Archived
  Canceled
  OnProcess
  Shipped
  DeliveryConfirmed
  Received
  Refunded
}

type Warehouse {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  organization: Organization!
  address: Address!
  transactions: [TransactionHeader!]!
}

type Organization {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  client: Client!
  warehouses: [Warehouse!]!
  address: Address!
}

type Client {
  id: Int!
  uuid: String!
  isEnabled: Boolean!
  createdByUserId: Int!
  modifiedByUserId: Int!
  dateRecordCreated: DateTime!
  dateLastModified: DateTime!
  displayName: String!
  description: String
  type: ClientType!
  organizations: [Organization!]!
  address: Address!
}

enum ClientType {
  SingleOrgSingleStore
  SingleOrgMultiStore
  MultiOrgSingleStore
  MultiOrgMultiStore
}

type Query {
  Users: [User!]!
  GetUser(input: ListUserInput!): User!
  getUserProfile(input: ListUserInput!): User!
  GetRoles: [Role!]!
  Warehouses: [Warehouse!]!
  BusinessPartners: [BusinessPartner!]!
  items(skip: Int = 0, take: Int = 25, itemCategoryId: Int, subCategoryId: Int, unitOfMeasureId: Int): [Item!]!
  getItemCategories: [Category!]!
  getItemUoms: [Category!]!
  getItem(id: Int!): Item!
  transactions(skip: Int = 0, take: Int = 25, warehouseId: Int, businessPartnerId: Int, includeLines: Boolean = false, type: String!, durationBegin: DateTime, durationEnd: DateTime): [TransactionHeader!]!
  transaction(id: Int!): TransactionHeader!
}

input ListUserInput {
  id: Int
  name: String
  email: String
  password: String
}

type Mutation {
  authUser(input: ListUserInput!): User!
  googleLogin(input: GoogleInput!): User!
  facebookLogin(input: FacebookInput!): User!
  register(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: Float!): DelResult!
  addRoles: [Role!]!
  addUserRoles(input: IdList!): User!
  deleteAll: Float!
  create(input: DisplayInput!): Warehouse!
  createBusinessPartner(input: DisplayInput!): BusinessPartner!
  createItem(input: CreateItemInput!): Item!
  removeItem(id: Int!): DelResult!
  createTransaction(input: CreateTransactionInput!): TransactionHeader!
  addTransactionLine(input: TransactionLineInput!): TransactionLine!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): TransactionHeader!
  removeTransaction(id: Int!): TransactionHeader!
}

input GoogleInput {
  idToken: String!
}

input FacebookInput {
  userID: String!
  accessToken: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  confirmPassword: String!
}

input UpdateUserInput {
  id: Int!
  name: String
  email: String
}

input IdList {
  ids: [Int!]!
}

input DisplayInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String!
  description: String
}

input CreateItemInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  code: String
  itemCategory: CategoryInput
  unitOfMeasure: CategoryInput
}

input CategoryInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  description: String
  type: CategoryType = ItemCategory
  parentCategory: CategoryInput
}

input CreateTransactionInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  warehouseId: Int
  businessPartnerId: Int
  type: Float
  number: String
  transactionDate: DateTime
  lines: [TransactionLineInput!]
}

input TransactionLineInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  headerId: Float
  header: TransactionInput
  itemId: Float!
  qty: Float!
  eachPrice: Float!
}

input TransactionInput {
  id: Int
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  warehouseId: Int
  businessPartnerId: Int
  type: Float!
  number: String
  transactionDate: DateTime
  lines: [TransactionLineInput!]
}

input UpdateTransactionInput {
  id: Int!
  createdByUserId: Int
  modifiedByUserId: Int
  version: Float
  uuid: String
  isEnabled: Boolean
  dateRecordCreated: DateTime
  dateLastModified: DateTime
  warehouseId: Int
  businessPartnerId: Int
  type: Float
  number: String
  transactionDate: DateTime
  lines: [TransactionLineInput!]
}
